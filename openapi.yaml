openapi: 3.0.0
servers:
  - url: //api.example.com/
    description: Example server
info:
  description: |
    Sample API Spec for getting sunspot data.

    Uses `data/sunspots.csv` from the class repository.

    If pricing were to be added to the API, a rate limit for requests would be
    added, where a paid user could acquire a client id that could be attached
    in the query parameters that would allow for a higher rate limit.

    To make the above work, the current limit and remaining requests would be
    shown in the headers. This would be per IP address (or another identifying
    metric like if users were added).
  version: 0.1.0
  title: 'Homework #7 API Spec'
tags:
  - name: spots
    description: |
      Collection of sunspot data.

      Sunspot data can be processed and analytics can be gathered.
  - name: reports
    description: |
      Analysis made on sunspot data per request.

      This assumes a job-based API has been created that can produce
      these reports.
paths:
  /spots:
    post:
      tags:
        - spots
      summary: Upload new sunspot data
      description: Upload new sunspot data to the database.
      responses:
        '201':
          description: Sunspot data uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewSpotsDatum'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-code-samples:
        - lang: Shell
          source: |
            $ curl -X POST http://api.example.com/spots \
                --data '{"year": 1870, "spots": 88}'
        - lang: Python
          source: |
            import requests

            url = 'http://api.example.com/spots'
            payload = {
              'year': 4,
              'spots': 88
            }

            r = requests.post(url, json=payload)

            print(r.json())
      requestBody:
        $ref: '#/components/requestBodies/NewSpotsDatum'
    get:
      tags:
        - spots
      summary: Get all sunspot data
      description: |
        Return all the sunspot data for all years.

        The time range by default covers all the years, but can be restricted
        with the `start` and `stop` query parameters.
      parameters:
        - name: start
          description: Starting year (inclusive)
          in: path
          schema:
            type: integer
            format: int64
        - name: end
          description: Ending year (inclusive)
          in: path
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotsData'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-code-samples:
        - lang: Shell
          source: |
            $ curl http://api.example.com/spots
        - lang: Python
          source: |
            import requests

            url = 'http://api.example.com/spots'

            r = requests.get(url)

            print(r.json())
  '/spots/{id}':
    get:
      tags:
        - spots
      summary: Get sunspot data by id
      description: Return the sunspot data for an id.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotsDatum'
      x-code-samples:
        - lang: Shell
          source: |
            $ curl http://api.example.com/spots/19
        - lang: Python
          source: |
            import requests

            url = 'http://api.example.com/spots/19'

            r = requests.get(url)

            print(r.json())
  /reports:
    get:
      tags:
        - reports
      summary: Get all reports
      description: |
        Return all the reports made.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportIdList'
      x-code-samples:
        - lang: Shell
          source: |
            $ curl http://api.example.com/reports
        - lang: Python
          source: |
            import requests

            url = 'http://api.example.com/reports'

            r = requests.get(url)

            print(r.json())
  '/reports/{id}':
    get:
      tags:
        - reports
      summary: Get a report by id
      description: |
        Return the report by the given report id string.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
      x-code-samples:
        - lang: Shell
          source: |
            $ curl http://api.example.com/report/a2fd6419-4397-4105-a9a3-7f19f07d600e
        - lang: Python
          source: |
            import requests

            url = 'http://api.example.com/report/a2fd6419-4397-4105-a9a3-7f19f07d600e'

            r = requests.get(url)

            print(r.json())
  '/reports/{id}/graph.png':
    get:
      tags:
        - reports
      summary: Get the graph for a report
      description: |
        Return the PNG graph file made for a report made by matplotlib.
      responses:
        '200':
          description: Successful operation
          content:
            image/png:
             schema:
               type: string
               format: binary
      x-code-samples:
        - lang: Shell
          source: |
            $ curl http://api.example.com/report/a2fd6419-4397-4105-a9a3-7f19f07d600e > graph.png
        - lang: Python
          source: |
            import shutil
            import requests

            url = 'http://api.example.com/report/a2fd6419-4397-4105-a9a3-7f19f07d600e'

            r = requests.get(url, stream=True)

            # Save the image to a file.
            with open('graph.png', 'wb') as f:
                shutil.copyfileobj(r.raw, f)
components:
  schemas:
    NewSpotsDatum:
      type: object
      required:
        - id
        - year
        - spots
      properties:
        id:
          type: int64
          example: 100
        year:
          type: int64
          example: 1870
        spots:
          description: Number of sunspots that year
          type: int64
          example: 88
    SpotsDatum:
      type: object
      required:
        - id
        - year
        - spots
      properties:
        id:
          type: int64
          example: 19
        year:
          type: int64
          example: 1789
        spots:
          description: Number of sunspots that year
          type: int64
          example: 118
    SpotsData:
      type: array
      required:
        - id
        - year
        - spots
      items:
        $ref: '#/components/schemas/SpotsDatum'
    Report:
      type: object
      required:
        - id
        - start
        - end
        - mean
        - graph_url
      properties:
        id:
          type: string
          description: UUID v4 id
          example: a2fd6419-4397-4105-a9a3-7f19f07d600e
        start:
          type: int64
          description: Starting year in data (inclusive)
          example: 1800
        end:
          type: int64
          description: Ending year in data (inclusive)
          example: 1849
        mean:
          type: float
          description: Mean spots count per year
          example: 55.1
        graph_url:
          type: string
          description: URL to retrieve graph from
          example: http://api.example.com/reports/a2fd6419-4397-4105-a9a3-7f19f07d600e/graph.png
    ReportId:
      type: string
      description: UUID v4 id
      example: a2fd6419-4397-4105-a9a3-7f19f07d600e
    ReportIdList:
      type: array
      items:
        $ref: '#/components/schemas/ReportId'
    ApiError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum:
            - Error
        message:
          type: string
  requestBodies:
    NewSpotsDatum:
      content:
        application/json:
          schema:
            type: object
            required:
              - year
              - spots
            properties:
              year:
                type: int64
                example: 1870
              spots:
                description: Number of sunspots that year
                type: int64
                example: 88

